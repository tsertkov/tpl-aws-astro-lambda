AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  ProjectName:
    Type: String
    MinLength: 2
  RegName:
    Type: String
    MinLength: 2
  EnvName:
    Type: String
    MinLength: 2
  DomainName:
    Type: String
    MinLength: 4
  ApiSubdomain:
    Type: String
    Default: api
  ApiTimeout:
    Type: Number
    Default: 3000
  ApiPayloadVersion:
    Type: String
    Default: '2.0'
  ApiThrottlingBurstLimit:
    Type: Number
    Default: 100
  ApiThrottlingRateLimit:
    Type: Number
    Default: 100
Globals:
  Function:
    Timeout: 3
    MemorySize: 128
    Handler: index.handler
    Runtime: nodejs20.x
    CodeUri: ../src
    Environment:
      Variables:
        ENV:
          Ref: EnvName
Resources:
  statusz:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
      SamResourceId: statusz
    Properties:
      AutoPublishAlias: live
      LoggingConfig:
        LogFormat: JSON
        LogGroup:
          Fn::Sub: ${ProjectName}-${RegName}-lambda-statusz
      Events:
        ExplicitApi:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /statusz
            Method: GET
            TimeoutInMillis:
              Ref: ApiTimeout
            PayloadFormatVersion:
              Ref: ApiPayloadVersion
      CodeUri: statusz
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name:
        Fn::Sub: ${ProjectName}-${RegName}
      CorsConfiguration:
        AllowOrigins:
        - Fn::Sub: https://${DomainName}
        - http://localhost:4321
        AllowMethods:
        - GET
        - POST
        AllowHeaders:
        - Content-Type
        MaxAge: 3600
  HttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId:
        Ref: HttpApi
      StageName:
        Ref: EnvName
      AutoDeploy: true
      AccessLogSettings:
        DestinationArn:
          Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ProjectName}-${RegName}-api
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp",
          "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey",
          "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength",
          "extendedRequestId": "$context.extendedRequestId" }'
      DefaultRouteSettings:
        ThrottlingBurstLimit:
          Ref: ApiThrottlingBurstLimit
        ThrottlingRateLimit:
          Ref: ApiThrottlingRateLimit
  HttpApiDomainForRegionMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    DependsOn: HttpApiStage
    Properties:
      ApiId:
        Ref: HttpApi
      DomainName:
        Fn::Sub: ${ApiSubdomain}-${RegName}.${DomainName}
      Stage:
        Ref: EnvName
  HttpApiDomainMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    DependsOn: HttpApiStage
    Properties:
      ApiId:
        Ref: HttpApi
      DomainName:
        Fn::Sub: ${ApiSubdomain}.${DomainName}
      Stage:
        Ref: EnvName
Outputs:
  StatuszLambda:
    Value:
      Ref: statusz
  ApiInvokeUrl:
    Value:
      Fn::Sub: https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com
  HttpApi:
    Value:
      Ref: HttpApi
